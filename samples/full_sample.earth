fn sayHello(name: str) {
    var greeting: str = "Hello " + name
    _ = yapln(greeting)
}

fn add(a: int, b: float)float {
    yeet a + b // yeet is equivalent to `return`
}

fn findMin(a: int, b: int)int {
    // When statements cannot directly yeet values, so we use a temp variable
    var result: int = 0

    when a < b {
        result = a
    }
    else {
        result = b
    }
    yeet result
}

fn isDivisible(a: int, b: int)bool {
    yeet a % b == 0
}

fn isBetween(a: int, b: float, c: int)bool {
    yeet a < b && b < c
}

fn main(){
    // All expressions must be attached to a statement. Since `yapln` returns
    // `nada`, we can attach it to an unnamed statement with _.
    // Below is equivalent to `var res: nada = sayHello("Cassi")`
    _ = sayHello("Cassi")

    var sum: float = add(1, 2.9)
    // yapln only accepts strings, so we must convert.
    // boolToStr intToStr are also available
    _ = yapln(floatToStr(sum))

    var min: int = findMin(1, 2)
    var msg: str = "The minimum is: " + intToStr(min)
    _ = yapln(msg)

    var isDiv: bool = isDivisible(10, 5)
    var divMsg: str = "10 is divisible by 5: " + boolToStr(isDiv)
    _ = yapln(divMsg)

    var isBet: bool = isBetween(1, 2.5, 3)
    var betMsg: str = "2.5 is between 1 and 3: " + boolToStr(isBet)
    _ = yapln(betMsg)

    var age: int = 100
    when age < 18 {
        _ = yapln("You're still a kid")
    }

    else when age < 30 {
        _ = yapln("You're still young")
    }

    else when age < 50 {
        _ = yapln("You're getting old")
    }

    else {
        _ = yapln("You're really old")
    }
}
